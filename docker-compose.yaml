services:
    postgres:
        container_name: postgres.cs-skins_container
        image: postgres
        environment:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: 1234
            PGDATA: /data/postgres
            POSTGRES_DB: ${DB_DATABASE:-cs-skins}
        volumes:
            - postgres:/data/postgres
        ports:
            - "5432:5432"
        restart: unless-stopped
        networks:
            - main_network

    pgadmin:
        container_name: pgadmin.cs-skins_container
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - pgadmin:/var/lib/pgadmin
        ports:
            - "${PGADMIN_PORT:-5050}:80"
        restart: unless-stopped
        depends_on:
            - postgres

    message_broker:
        container_name: rabbitmq.cs-skins_container
        image: rabbitmq:3-management
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        networks:
            - main_network
        ports:
            - 5672:5672
            - 15672:15672
        restart: unless-stopped

    cronjobs_service:
        container_name: cronjobs.cs-skins_container
        depends_on:
            - message_broker
        environment:
            MESSAGE_BROKER_HOST: ${MESSAGE_BROKER_HOST:-localhost}
            MESSAGE_BROKER_USER: ${MESSAGE_BROKER_USER:-guest}
            MESSAGE_BROKER_PASSWORD: ${MESSAGE_BROKER_PASSWORD:-guest}
            MESSAGE_BROKER_PROTOCOL: ${MESSAGE_BROKER_PROTOCOL:-amqp}
            MESSAGE_BROKER_PATHNAME: ${MESSAGE_BROKER_PATHNAME}
        build:
            context: .
            dockerfile: ./apps/cronjobs/Dockerfile
        restart: unless-stopped
        networks:
            - main_network

    scraper_service:
        container_name: scraper.cs-skins_container
        depends_on:
            - message_broker
        environment:
            DATABASE_URL: ${DATABASE_URL:-postgres://root:1234@localhost:5432/cs-skins?schema=public}
            MESSAGE_BROKER_HOST: ${MESSAGE_BROKER_HOST:-localhost}
            MESSAGE_BROKER_USER: ${MESSAGE_BROKER_USER:-guest}
            MESSAGE_BROKER_PASSWORD: ${MESSAGE_BROKER_PASSWORD:-guest}
            MESSAGE_BROKER_PROTOCOL: ${MESSAGE_BROKER_PROTOCOL:-amqp}
            MESSAGE_BROKER_PATHNAME: ${MESSAGE_BROKER_PATHNAME}
        build:
            context: .
            dockerfile: apps/scraper/Dockerfile
        restart: unless-stopped
        networks:
            - main_network

    apm-server:
        image: docker.elastic.co/apm/apm-server:7.17.16
        depends_on:
            elasticsearch:
                condition: service_healthy
            kibana:
                condition: service_healthy
        cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
        cap_drop: ["ALL"]
        ports:
            - 8200:8200
        networks:
            - elastic
        command: >
            apm-server -e
              -E apm-server.rum.enabled=true
              -E setup.kibana.host=kibana:5601
              -E setup.template.settings.index.number_of_replicas=0
              -E apm-server.kibana.enabled=true
              -E apm-server.kibana.host=kibana:5601
              -E output.elasticsearch.hosts=["elasticsearch:9200"]
        healthcheck:
            interval: 10s
            retries: 12
            test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.16
        environment:
            - bootstrap.memory_lock=true
            - cluster.name=docker-cluster
            - cluster.routing.allocation.disk.threshold_enabled=false
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        ulimits:
            memlock:
                hard: -1
                soft: -1
        volumes:
            - esdata:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - elastic
        healthcheck:
            interval: 20s
            retries: 10
            test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

    kibana:
        image: docker.elastic.co/kibana/kibana:7.17.16
        depends_on:
            elasticsearch:
                condition: service_healthy
        environment:
            ELASTICSEARCH_URL: http://elasticsearch:9200
            ELASTICSEARCH_HOSTS: http://elasticsearch:9200
        ports:
            - 5601:5601
        networks:
            - elastic
        healthcheck:
            interval: 10s
            retries: 20
            test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status
    apm-server-reverse-proxy:
        image: ngrok/ngrok
        command: tunnel --label edge=edghts_2ceDe1Ip3nPzo8PxQXclZ8z7G9O http://localhost:8200
        environment:
            - NGROK_AUTHTOKEN=2bQ7JlggQZQx9WE21JBuB6qV93O_7rn3UU4GTPC44ksjiGVFx
        tty: true
        stdin_open: true

networks:
    main_network:
        driver: bridge
    elastic:
        driver: bridge

volumes:
    postgres:
    pgadmin:
    esdata:
