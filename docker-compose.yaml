services:
  mysql:
    container_name: mysql.cs-skins_container
    image: mysql:latest
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_USER: mysql
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: ${DB_DATABASE:-cs-skins}
    ports:
      - 3306:3306
    restart: unless-stopped
    networks:
      - main_network

  message_broker:
    container_name: rabbitmq.cs-skins_container
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - main_network
    ports:
      - 5672:5672
      - 15672:15672
    restart: unless-stopped

  cronjobs_service:
    container_name: cronjobs.cs-skins_container
    depends_on:
      - message_broker
      - mysql
    environment:
      MESSAGE_BROKER_HOST: ${MESSAGE_BROKER_HOST:-localhost}
      MESSAGE_BROKER_USER: ${MESSAGE_BROKER_USER:-guest}
      MESSAGE_BROKER_PASSWORD: ${MESSAGE_BROKER_PASSWORD:-guest}
      MESSAGE_BROKER_PROTOCOL: ${MESSAGE_BROKER_PROTOCOL:-amqp}
    build:
      context: .
      dockerfile: ./apps/cronjobs/Dockerfile
    restart: unless-stopped
    networks:
      - main_network

  scraper_service:
    container_name: scraper.cs-skins_container
    depends_on:
      - message_broker
      - mysql
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgres://root:1234@localhost:5432/cs-skins?schema=public}
      MESSAGE_BROKER_HOST: ${MESSAGE_BROKER_HOST:-localhost}
      MESSAGE_BROKER_USER: ${MESSAGE_BROKER_USER:-guest}
      MESSAGE_BROKER_PASSWORD: ${MESSAGE_BROKER_PASSWORD:-guest}
      MESSAGE_BROKER_PROTOCOL: ${MESSAGE_BROKER_PROTOCOL:-amqp}
    build:
      context: .
      dockerfile: apps/scraper/Dockerfile
    restart: unless-stopped
    networks:
      - main_network

networks:
  main_network:
    driver: bridge

volumes:
  mysql:
